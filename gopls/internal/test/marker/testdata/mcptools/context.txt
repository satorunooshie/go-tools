This test exercises mcp tool context.

-- flags --
-mcp
-ignore_extra_diags

-- go.mod --
module example.com

-- commenttest/main.go --
package main

import(
    "example.com/commenttest/comment"
)

func testComment() { //@loc(comment, "test")
    comment.Foo("", 0)
    function.Foo(0, "")
}

//@mcptool("context", `{}`, comment, output=withComment)

-- commenttest/comment/doc.go --
// Copyright 2025 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
Package doc for package comment.
*/
package comment

-- commenttest/comment/comment.go --
// File doc for comment.go part 1.
package comment

// File doc for comment.go part 2.
import (
    // comment for package renaming.
    myfmt "fmt"
)

// File doc for comment.go part 3.

// Func doc for comment.Foo
func Foo(foo string, _ int) {
    myfmt.Printf("%s", foo)
}

// Random comment floating around.

-- @withComment --
Code blocks are delimited by --->...<--- markers.

Current file "main.go" contains this import declaration:
--->
import(
    "example.com/commenttest/comment"
)
<---

The imported packages declare the following symbols:

example.com/commenttest/comment (package comment)
comment.go:
--->
// File doc for comment.go part 1.
package comment

// File doc for comment.go part 2.
import (
    // comment for package renaming.
    myfmt "fmt"
)

// File doc for comment.go part 3.

// Func doc for comment.Foo
func Foo(foo string, _ int)

<---

doc.go:
--->
/*
Package doc for package comment.
*/
package comment

<---

-- functiontest/main.go --
package main

import(
    "example.com/functiontest/function"
)

func testFunction() { //@loc(function, "test")
    function.Foo(0, "")
}

//@mcptool("context", `{}`, function, output=withFunction)

-- functiontest/function/function.go --
package function

func Foo(int, string) {}

func foo(string, int) {}

type unexported struct {}

func (*unexported) unexported(int) {}

func (*unexported) Exported(int) {}

type Exported struct{}

func (*Exported) unexported(int) {}

func (*Exported) Exported(int) {}

-- @withFunction --
Code blocks are delimited by --->...<--- markers.

Current file "main.go" contains this import declaration:
--->
import(
    "example.com/functiontest/function"
)
<---

The imported packages declare the following symbols:

example.com/functiontest/function (package function)
function.go:
--->
package function

func Foo(int, string)

type Exported struct{}

func (*Exported) Exported(int)

<---

-- typetest/main.go --
package main

import(
    "example.com/typetest/types"
)

var x types.Exported //@loc(types, "x")

//@mcptool("context", `{}`, types, output=withType)

-- typetest/types/types.go --
package types

// Doc for exported.
type Exported struct {
    // Doc for exported.
    Exported string
    // Doc for unexported.
    unexported string
}

// Doc for types.
type (
    // Doc for Foo first line.
    // Doc for Foo second line.
    Foo struct {
        foo string
    }

    // Doc for foo.
    foo struct {}

    // Doc for Bar.
    Bar struct {
        bar string
    }

    // Doc for bar.
    bar struct {}
)

-- @withType --
Code blocks are delimited by --->...<--- markers.

Current file "main.go" contains this import declaration:
--->
import(
    "example.com/typetest/types"
)
<---

The imported packages declare the following symbols:

example.com/typetest/types (package types)
types.go:
--->
package types

// Doc for exported.
type Exported struct {
    // Doc for exported.
    Exported string
    // Doc for unexported.
    unexported string
}

// Doc for types.
type (
    // Doc for Foo first line.
    // Doc for Foo second line.
    Foo struct {
        foo string
    }
    // Doc for Bar.
    Bar struct {
        bar string
    }
)

<---

-- valuetest/main.go --
package main

import(
    "example.com/valuetest/values"
)

var y values.ConstFoo //@loc(values, "y")

//@mcptool("context", `{}`, values, output=withValue)

-- valuetest/values/consts.go --
package values

const (
    // doc for ConstFoo
    ConstFoo = "Foo" // comment for ConstFoo
    // doc for constFoo
    constFoo = "foo" // comment for constFoo
    // doc for ConstBar
    ConstBar = "Bar" // comment for ConstBar
    // doc for constBar
    constBar = "bar" // comment for constBar
)

// doc for ConstExported
const ConstExported = "Exported" // comment for ConstExported

// doc for constUnexported
var constUnexported = "unexported" // comment for constUnexported

-- valuetest/values/vars.go --
package values

var (
    // doc for VarFoo
    VarFoo = "Foo" // comment for VarFoo
    // doc for varFoo
    varFoo = "foo" // comment for varFoo
    // doc for VarBar
    VarBar = "Bar" // comment for VarBar
    // doc for varBar
    varBar = "bar" // comment for varBar
)

// doc for VarExported
var VarExported = "Exported" // comment for VarExported

// doc for varUnexported
var varUnexported = "unexported" // comment for varUnexported

-- @withValue --
Code blocks are delimited by --->...<--- markers.

Current file "main.go" contains this import declaration:
--->
import(
    "example.com/valuetest/values"
)
<---

The imported packages declare the following symbols:

example.com/valuetest/values (package values)
consts.go:
--->
package values

const (
    // doc for ConstFoo
    ConstFoo = "Foo" // comment for ConstFoo
    // doc for ConstBar
    ConstBar = "Bar" // comment for ConstBar
)

// doc for ConstExported
const ConstExported = "Exported" // comment for ConstExported

<---

vars.go:
--->
package values

var (
    // doc for VarFoo
    VarFoo = "Foo" // comment for VarFoo
    // doc for VarBar
    VarBar = "Bar" // comment for VarBar
)

// doc for VarExported
var VarExported = "Exported" // comment for VarExported

<---

